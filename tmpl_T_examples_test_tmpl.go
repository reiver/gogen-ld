package main

import (
	"github.com/reiver/gogen-ld/driver"
)

func init() {

	driver := gendriver.SimpleDriver{
		NamePattern: "{{.Name}}_examples_test.go",
		TextTemplate:
`// DO NOT EDIT
//
// MACHINE GENERATED BY THE FOLLOWING COMMAND
// gogen-ld --pkg={{.Pkg}} --type={{.Type}} --name={{.Name}}
package {{.Pkg}}_test

{{if or (eq .Type "bool") (eq .Type "float32") (eq .Type "float64") (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") (eq .Type "string") (eq .Type "time.Time") (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}

// THIS FILE IS GENERATED; DO NOT EDIT

import (
{{range .Imports}}
	"{{.}}"
{{end}}


	"{{.Self}}"

	"fmt"
)

// THIS FILE IS GENERATED; DO NOT EDIT

func Example{{.Name}}_notEqual() {

	{{if eq .Type "bool"}}
	var v {{.Type}} = true
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	var v {{.Type}} = 2.2
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	var v {{.Type}} = -3
	{{else if eq .Type "string"}}
	var v {{.Type}} = "FOUR"
	{{else if eq .Type "time.Time"}}
	var v {{.Type}} = time.Date(2005, time.May, 15, 23, 0, 0, 0, time.UTC)
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	var v {{.Type}} = 3
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}

	var a {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}Some(v)
	fmt.Printf("a = %v\n", a)

	var b {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}NotLoaded()
	fmt.Printf("b = %v\n", b)

	if a == b {
		fmt.Println("They are equal.\n")
	}
	if a != b {
		fmt.Println("They are not equal.\n")
	}

	{{if eq .Type "bool"}}
	// Output:
	// a = {{.Name}}Some(true)
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	// Output:
	// a = {{.Name}}Some(2.2)
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	// Output:
	// a = {{.Name}}Some(-3)
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else if eq .Type "string"}}
	// Output:
	// a = {{.Name}}Some("FOUR")
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else if eq .Type "time.Time"}}
	// Output:
	// a = {{.Name}}Some(2005-05-15 23:00:00 +0000 UTC)
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	// Output:
	// a = {{.Name}}Some(3)
	// b = {{.Name}}NotLoaded()
	// They are not equal.
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}
}

// THIS FILE IS GENERATED; DO NOT EDIT

func Example{{.Name}}_equal() {

	{{if eq .Type "bool"}}
	var v1 {{.Type}} = true
	var v2 {{.Type}} = true
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	var v1 {{.Type}} = 2.2
	var v2 {{.Type}} = 2.2
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	var v1 {{.Type}} = -3
	var v2 {{.Type}} = -3
	{{else if eq .Type "string"}}
	var v1 {{.Type}} = "FOUR"
	var v2 {{.Type}} = "FOUR"
	{{else if eq .Type "time.Time"}}
	var v1 {{.Type}} = time.Date(2005, time.May,   15, 23, 0, 0, 0, time.UTC)
	var v2 {{.Type}} = time.Date(2005, time.May,   15, 23, 0, 0, 0, time.UTC)
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	var v1 {{.Type}} = 3
	var v2 {{.Type}} = 3
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}

	var a {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}Some(v1)
	fmt.Printf("a = %v\n", a)

	var b {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}Some(v2)
	fmt.Printf("b = %v\n", b)

	if a == b {
		fmt.Println("They are equal.\n")
	}
	if a != b {
		fmt.Println("They are not equal.\n")
	}

	// Output:
	// a = {{.Name}}Some(12)
	// b = {{.Name}}Some(12)
	// They are equal.

	{{if eq .Type "bool"}}
	// Output:
	// a = {{.Name}}Some(true)
	// b = {{.Name}}Some(true)
	// They are equal.
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	// Output:
	// a = {{.Name}}Some(2.2)
	// b = {{.Name}}Some(2.2)
	// They are equal.
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	// Output:
	// a = {{.Name}}Some(-3)
	// b = {{.Name}}Some(-3)
	// They are equal.
	{{else if eq .Type "string"}}
	// Output:
	// a = {{.Name}}Some("FOUR")
	// b = {{.Name}}Some("FOUR")
	// They are equal.
	{{else if eq .Type "time.Time"}}
	// Output:
	// a = {{.Name}}Some(2005-05-15 23:00:00 +0000 UTC)
	// b = {{.Name}}Some(2005-05-15 23:00:00 +0000 UTC)
	// They are equal.
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	// Output:
	// a = {{.Name}}Some(3)
	// b = {{.Name}}Some(3)
	// They are equal.
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}
}

// THIS FILE IS GENERATED; DO NOT EDIT

func Example{{.Name}}_Match_noneNotLoaded() {

	switch x := {{.Pkg}}.{{.Name}}NotLoaded().Match().(type) {
	case {{.Pkg}}.{{.Name}}Value:
		fmt.Printf("MATCHED {{.Name}}Value: (%T) %v\n", x, x)
	case {{.Pkg}}.{{.Name}}NoneNotLoaded:
		fmt.Printf("MATCHED {{.Name}}NoneNotLoaded: (%T) %v\n", x, x)
	default:
		fmt.Println("Oops.")
	}


	var n {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}NotLoaded()

	switch x := n.Match().(type) {
	case {{.Pkg}}.{{.Name}}Value:
		fmt.Printf("MATCHED {{.Name}}Value: (%T) %v\n", x, x)
	case {{.Pkg}}.{{.Name}}NoneNotLoaded:
		fmt.Printf("MATCHED {{.Name}}NoneNotLoaded: (%T) %v\n", x, x)
	default:
		fmt.Println("Oops.")
	}

	// Output:
	// MATCHED {{.Name}}NoneNotLoaded: ({{.Pkg}}.{{.Name}}NoneNotLoaded) <{{.Name}}NotLoaded>
	// MATCHED {{.Name}}NoneNotLoaded: ({{.Pkg}}.{{.Name}}NoneNotLoaded) <{{.Name}}NotLoaded>
}

// THIS FILE IS GENERATED; DO NOT EDIT

func Example{{.Name}}_Match_some() {

	{{if eq .Type "bool"}}
	var v {{.Type}} = true
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	var v {{.Type}} = 2.2
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	var v {{.Type}} = -3
	{{else if eq .Type "string"}}
	var v {{.Type}} = "FOUR"
	{{else if eq .Type "time.Time"}}
	var v {{.Type}} = time.Date(2005, time.May, 15, 23, 0, 0, 0, time.UTC)
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	var v {{.Type}} = 3
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}


	switch x := {{.Pkg}}.{{.Name}}Some(v).Match().(type) {
	case {{.Pkg}}.{{.Name}}Value:
		fmt.Printf("MATCHED {{.Name}}Value: (%T) %v\n", x, x)
	case {{.Pkg}}.{{.Name}}NoneNotLoaded:
		fmt.Printf("MATCHED {{.Name}}NoneNotLoaded: (%T) %v\n", x, x)
	default:
		fmt.Println("Oops.")
	}


	var n {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}Some(v)

	switch x := n.Match().(type) {
	case {{.Pkg}}.{{.Name}}Value:
		fmt.Printf("MATCHED {{.Name}}Value: (%T) %v\n", x, x)
	case {{.Pkg}}.{{.Name}}NoneNotLoaded:
		fmt.Printf("MATCHED {{.Name}}NoneNotLoaded: (%T) %v\n", x, x)
	default:
		fmt.Println("Oops.")
	}

	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 42
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 42

	{{if eq .Type "bool"}}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) true
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) true
	{{else if or (eq .Type "float32") (eq .Type "float64") }}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 2.2
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 2.2
	{{else if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") }}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) -3
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) -3
	{{else if eq .Type "string"}}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) "FOUR"
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) "FOUR"
	{{else if eq .Type "time.Time"}}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 2005-05-15 23:00:00 +0000 UTC
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 2005-05-15 23:00:00 +0000 UTC
	{{else if or (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
	// Output:
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 3
	// MATCHED {{.Name}}Value: ({{.Pkg}}.{{.Name}}Value) 3
	{{else}}
	panic("THIS SHOULD NOT HAVE BEEN GENERATED!")
	{{end}}
}

// THIS FILE IS GENERATED; DO NOT EDIT

{{if or (eq .Type "int8") (eq .Type "int16") (eq .Type "int32") (eq .Type "int64") (eq .Type "uint8") (eq .Type "uint16") (eq .Type "uint32") (eq .Type "uint64") }}
func Example{{.Name}}_Match_someMath() {

	var a {{.Pkg}}.{{.Name}} = {{.Pkg}}.{{.Name}}Some(2)

	switch x := a.Match().(type) {
	case {{.Pkg}}.{{.Name}}Value:
		b := x + 1

		fmt.Printf("RESULT: (%T) %v\n", b, b)
	case {{.Pkg}}.{{.Name}}NoneNotLoaded:
		fmt.Printf("MATCHED {{.Name}}NoneNotLoaded: %v\n", x)
	default:
		fmt.Println("Oops.")
	}

	// Output:
	// RESULT: ({{.Pkg}}.{{.Name}}Value) 3
}
{{end}}
{{end}}
`}

	registry := gendriver.Registry
	if nil == registry {
		panic(errNilRegistry)
	}

	if err := registry.Register(driver.NamePattern, driver); nil != err {
		panic(err)
	}
}
