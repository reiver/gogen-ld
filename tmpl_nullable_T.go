package main

import (
	"github.com/reiver/gogen-ld/driver"
)

func init() {

	driver := gendriver.SimpleDriver{
		NamePattern: "nullable_{{.Name}}.go",
		TextTemplate:
`// DO NOT EDIT
//
// MACHINE GENERATED BY THE FOLLOWING COMMAND
// gogen-ld --pkg={{.Pkg}} --type={{.Type}} --name={{.Name}}
package {{.Pkg}}

// THIS FILE IS GENERATED; DO NOT EDIT

import (
{{range .Imports}}
	"{{.}}"
{{end}}
	"fmt"
)

// THIS FILE IS GENERATED; DO NOT EDIT

type Nullable{{.Name}} struct {
	value {{.Type}}
	loaded bool
	null bool
}

// THIS FILE IS GENERATED; DO NOT EDIT

func (receiver Nullable{{.Name}}) Match() Nullable{{.Name}}Matcher {
	if !receiver.loaded {
		return {{.Name}}NoneNotLoaded{}
	}

	if receiver.null {
		return {{.Name}}NoneNull{}
	}

	return {{.Name}}Value(receiver.value)
}

// THIS FILE IS GENERATED; DO NOT EDIT

func (receiver Nullable{{.Name}}) String() string {
	if !receiver.loaded {
		return "Nullable{{.Name}}NotLoaded()"
	}

	if receiver.null {
		return "Nullable{{.Name}}Null()"
	}

	return fmt.Sprintf("Nullable{{.Name}}Some(%v)", receiver.value)
}

// THIS FILE IS GENERATED; DO NOT EDIT

func (receiver Nullable{{.Name}}) {{.Name}}() (value {{.Type}}, err error) {
	if !receiver.loaded {
		err = errNotLoaded
		return
	}

	if receiver.null {
		err = errNull
		return
	}

	return receiver.value, nil
}
`}

	registry := gendriver.Registry
	if nil == registry {
		panic(errNilRegistry)
	}

	if err := registry.Register(driver.NamePattern, driver); nil != err {
		panic(err)
	}
}
